generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  name                String
  email               String       @unique
  role                Role
  createdAt           DateTime     @default(now())
  department          String?
  isActive            Boolean      @default(true)
  password            String
  phone               String?
  updatedAt           DateTime     @updatedAt
  employeeId          String?
  assignedAssignments Assignment[] @relation("AssignedByAssignments")
  assignments         Assignment[] @relation("OfficerAssignments")
  comments            Comment[]
  complaints          Complaint[]  @relation("UserComplaints")
}

model Complaint {
  id          String       @id @default(uuid())
  title       String
  description String?
  location    String?
  status      Status       @default(pending)
  createdAt   DateTime     @default(now())
  category    Category     @default(others)
  imageUrl    String?
  latitude    Float?
  longitude   Float?
  priority    Priority     @default(medium)
  updatedAt   DateTime     @updatedAt
  address     String?
  area        String?
  citizenId   String
  images      String[]     @default([])
  landmark    String?
  assignments Assignment[]
  comments    Comment[]
  user        User         @relation("UserComplaints", fields: [citizenId], references: [id], onDelete: Cascade)
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  complaintId String
  createdAt   DateTime  @default(now())
  userId      String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String           @id @default(uuid())
  complaintId String
  officerId   String
  assignedBy  String
  assignedAt  DateTime         @default(now())
  dueDate     DateTime?
  notes       String?
  priority    Priority         @default(medium)
  status      AssignmentStatus @default(assigned)
  assigner    User             @relation("AssignedByAssignments", fields: [assignedBy], references: [id], onDelete: Cascade)
  complaint   Complaint        @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  officer     User             @relation("OfficerAssignments", fields: [officerId], references: [id], onDelete: Cascade)
}

enum Role {
  citizen
  admin
  officer
}

enum Status {
  pending
  assigned
  resolved
  in_progress
  closed
}

enum Priority {
  low
  medium
  high
  critical
}

enum Category {
  roads
  streetlight
  sanitation
  water
  tree
  electricity
  drainage
  others
}

enum AssignmentStatus {
  assigned
  in_progress
  completed
  on_hold
}
