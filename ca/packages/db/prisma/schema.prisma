// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  phone      String?
  role       Role
  department String?
  employeeId String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  complaints Complaint[] @relation("UserComplaints")
  assignments Assignment[] @relation("OfficerAssignments")
  assignedAssignments Assignment[] @relation("AssignedByAssignments")
  comments   Comment[]
}

model Complaint {
  id          String     @id @default(uuid())
  title       String
  description String?
  category    Category   @default(others)
  priority    Priority   @default(medium)
  location    String?
  area        String?
  landmark    String?
  address     String?
  latitude    Float?
  longitude   Float?
  imageUrl    String?
  images      String[]   @default([])
  status      Status     @default(pending)
  citizenId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation("UserComplaints", fields: [citizenId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  comments    Comment[]
}

model Comment {
  id          String     @id @default(uuid())
  content     String
  complaintId String
  userId      String
  createdAt   DateTime   @default(now())

  complaint   Complaint  @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id          String         @id @default(uuid())
  complaintId String
  officerId   String
  assignedBy  String
  assignedAt  DateTime       @default(now())
  priority    Priority       @default(medium)
  status      AssignmentStatus @default(assigned)
  dueDate     DateTime?
  notes       String?

  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  officer     User      @relation("OfficerAssignments", fields: [officerId], references: [id], onDelete: Cascade)
  assigner    User      @relation("AssignedByAssignments", fields: [assignedBy], references: [id], onDelete: Cascade)
}

enum Role {
  citizen
  admin
  officer
}

enum Status {
  pending
  assigned
  in_progress
  resolved
  closed
}

enum Priority {
  low
  medium
  high
  critical
}

enum Category {
  roads
  streetlight
  sanitation
  water
  tree
  electricity
  drainage
  others
}

enum AssignmentStatus {
  assigned
  in_progress
  completed
  on_hold
}
